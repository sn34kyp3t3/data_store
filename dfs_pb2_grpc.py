# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""

import grpc
import warnings

import dfs_pb2 as dfs__pb2

GRPC_GENERATED_VERSION = "1.68.0"
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower

    _version_not_supported = first_version_is_lower(
        GRPC_VERSION, GRPC_GENERATED_VERSION
    )
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f"The grpc package installed is at version {GRPC_VERSION},"
        + f" but the generated code in dfs_pb2_grpc.py depends on"
        + f" grpcio>={GRPC_GENERATED_VERSION}."
        + f" Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}"
        + f" or downgrade your generated code using grpcio-tools<={GRPC_VERSION}."
    )


class LeaderServiceStub(object):
    """Service definitions"""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.UploadFile = channel.unary_unary(
            "/dfs.LeaderService/UploadFile",
            request_serializer=dfs__pb2.FileUploadRequest.SerializeToString,
            response_deserializer=dfs__pb2.FileUploadResponse.FromString,
            _registered_method=True,
        )
        self.ReadFile = channel.unary_stream(
            "/dfs.LeaderService/ReadFile",
            request_serializer=dfs__pb2.FileReadRequest.SerializeToString,
            response_deserializer=dfs__pb2.FileReadResponse.FromString,
            _registered_method=True,
        )
        self.DeleteFile = channel.unary_unary(
            "/dfs.LeaderService/DeleteFile",
            request_serializer=dfs__pb2.FileDeleteRequest.SerializeToString,
            response_deserializer=dfs__pb2.FileDeleteResponse.FromString,
            _registered_method=True,
        )


class LeaderServiceServicer(object):
    """Service definitions"""

    def UploadFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def ReadFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DeleteFile(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_LeaderServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "UploadFile": grpc.unary_unary_rpc_method_handler(
            servicer.UploadFile,
            request_deserializer=dfs__pb2.FileUploadRequest.FromString,
            response_serializer=dfs__pb2.FileUploadResponse.SerializeToString,
        ),
        "ReadFile": grpc.unary_stream_rpc_method_handler(
            servicer.ReadFile,
            request_deserializer=dfs__pb2.FileReadRequest.FromString,
            response_serializer=dfs__pb2.FileReadResponse.SerializeToString,
        ),
        "DeleteFile": grpc.unary_unary_rpc_method_handler(
            servicer.DeleteFile,
            request_deserializer=dfs__pb2.FileDeleteRequest.FromString,
            response_serializer=dfs__pb2.FileDeleteResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "dfs.LeaderService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("dfs.LeaderService", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.


class LeaderService(object):
    """Service definitions"""

    @staticmethod
    def UploadFile(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/dfs.LeaderService/UploadFile",
            dfs__pb2.FileUploadRequest.SerializeToString,
            dfs__pb2.FileUploadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def ReadFile(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_stream(
            request,
            target,
            "/dfs.LeaderService/ReadFile",
            dfs__pb2.FileReadRequest.SerializeToString,
            dfs__pb2.FileReadResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def DeleteFile(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/dfs.LeaderService/DeleteFile",
            dfs__pb2.FileDeleteRequest.SerializeToString,
            dfs__pb2.FileDeleteResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )


class DataNodeServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.StoreChunk = channel.unary_unary(
            "/dfs.DataNodeService/StoreChunk",
            request_serializer=dfs__pb2.Chunk.SerializeToString,
            response_deserializer=dfs__pb2.StoreChunkResponse.FromString,
            _registered_method=True,
        )
        self.RetrieveChunk = channel.unary_unary(
            "/dfs.DataNodeService/RetrieveChunk",
            request_serializer=dfs__pb2.ChunkRequest.SerializeToString,
            response_deserializer=dfs__pb2.Chunk.FromString,
            _registered_method=True,
        )
        self.DeleteChunk = channel.unary_unary(
            "/dfs.DataNodeService/DeleteChunk",
            request_serializer=dfs__pb2.ChunkRequest.SerializeToString,
            response_deserializer=dfs__pb2.DeleteChunkResponse.FromString,
            _registered_method=True,
        )
        self.Heartbeat = channel.unary_unary(
            "/dfs.DataNodeService/Heartbeat",
            request_serializer=dfs__pb2.HeartbeatRequest.SerializeToString,
            response_deserializer=dfs__pb2.HeartbeatResponse.FromString,
            _registered_method=True,
        )


class DataNodeServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def StoreChunk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def RetrieveChunk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def DeleteChunk(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")

    def Heartbeat(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details("Method not implemented!")
        raise NotImplementedError("Method not implemented!")


def add_DataNodeServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
        "StoreChunk": grpc.unary_unary_rpc_method_handler(
            servicer.StoreChunk,
            request_deserializer=dfs__pb2.Chunk.FromString,
            response_serializer=dfs__pb2.StoreChunkResponse.SerializeToString,
        ),
        "RetrieveChunk": grpc.unary_unary_rpc_method_handler(
            servicer.RetrieveChunk,
            request_deserializer=dfs__pb2.ChunkRequest.FromString,
            response_serializer=dfs__pb2.Chunk.SerializeToString,
        ),
        "DeleteChunk": grpc.unary_unary_rpc_method_handler(
            servicer.DeleteChunk,
            request_deserializer=dfs__pb2.ChunkRequest.FromString,
            response_serializer=dfs__pb2.DeleteChunkResponse.SerializeToString,
        ),
        "Heartbeat": grpc.unary_unary_rpc_method_handler(
            servicer.Heartbeat,
            request_deserializer=dfs__pb2.HeartbeatRequest.FromString,
            response_serializer=dfs__pb2.HeartbeatResponse.SerializeToString,
        ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
        "dfs.DataNodeService", rpc_method_handlers
    )
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers("dfs.DataNodeService", rpc_method_handlers)


# This class is part of an EXPERIMENTAL API.


class DataNodeService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def StoreChunk(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/dfs.DataNodeService/StoreChunk",
            dfs__pb2.Chunk.SerializeToString,
            dfs__pb2.StoreChunkResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def RetrieveChunk(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/dfs.DataNodeService/RetrieveChunk",
            dfs__pb2.ChunkRequest.SerializeToString,
            dfs__pb2.Chunk.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def DeleteChunk(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/dfs.DataNodeService/DeleteChunk",
            dfs__pb2.ChunkRequest.SerializeToString,
            dfs__pb2.DeleteChunkResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )

    @staticmethod
    def Heartbeat(
        request,
        target,
        options=(),
        channel_credentials=None,
        call_credentials=None,
        insecure=False,
        compression=None,
        wait_for_ready=None,
        timeout=None,
        metadata=None,
    ):
        return grpc.experimental.unary_unary(
            request,
            target,
            "/dfs.DataNodeService/Heartbeat",
            dfs__pb2.HeartbeatRequest.SerializeToString,
            dfs__pb2.HeartbeatResponse.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True,
        )
